#!/usr/bin/env ruby

require 'action_channels'

class PingPongChannel < ActionChannels::Channels::Base
  def process_custom_message(message)
    case message.type
    when 'ping'
      send_message message.author, ActionChannels::Message.new(channel: name, type: 'pong')
    when 'pong'
      send_message message.author, ActionChannels::Message.new(channel: name, type: 'ping')
    else
      on_unknown_type_message message
    end
  end
end

server = ActionChannels::Server.new(
  port: 3050,
  channels: [PingPongChannel.new(name: 'ping-pong')]
)

server.run

puts <<-MSG
* Websocket server started on port #{server.port}.
* Version: #{ActionChannels::VERSION}
Use Ctrl-C to stop
MSG


sig_read, sig_write = IO.pipe

(%w[INT TERM HUP] & Signal.list.keys).each do |sig|
  trap sig do
    sig_write.puts(sig)
  end
end

while io = IO.select([sig_read])
  sig = io.first[0].gets.chomp

  exit 0 if %w[INT TERM HUP].include? sig
end
